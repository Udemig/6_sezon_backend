// API : Gelen istekkeri izler ve isteklere cevap gÃ¶nderirir.

// gerekli modÃ¼lleri Ã§aÄŸÄ±rdÄ±k
const http = require("http");
const fs = require("fs");
const url = require("url");

// kendi oluÅŸturduÄŸumuz fonskiyonu import et
const replaceTemplate = require("./modules/replaceTemplate");

/*
* createServer (), verdiÄŸimiz dinleyiciyi fonksiyona her geldiÄŸinde tetikler.
* Bu fonksiyon 2 parametre alÄ±r.
* 1) request > istek ile alakalÄ± verileri iÃ§eren nesne.
* 2) response > cevap gÃ¶ndermemmizi saÄŸlayacak nesne.


* Bu foksiyon iÃ§eriisnde gelen isteÄŸe gÃ¶re cevap gÃ¶nderilir.


*/

/*
Routing
* API'ya gelen isteÄŸin hangi endpoint (uÃ§ nokta / yol )'a geldÄŸinin tespit edip ona gÃ¶re farklÄ± cevapÅŸar gÃ¶nderme iÅŸlemine routing denir.
* Routing iÃ§in client'Ä±n hangi yola ve hangi http methodu ile istek attÄ±ÄŸÄ±nÄ± bilmemiz gerekiyor.

*/

// html ÅŸablon verilerine eriÅŸ
let tempOverview = fs.readFileSync("./templates/overview.html", "utf-8");
let tempProduct = fs.readFileSync("./templates/product.html", "utf-8");
let tempCard = fs.readFileSync("./templates/card.html", "utf-8");

// json dosyasÄ±ndaki verilere eriÅŸ
let jsonData = fs.readFileSync("./dev-data/data.json", "utf-8");

// json veriisni js formatÄ±na Ã§evir
const data = JSON.parse(jsonData);

//http.createServer fonk. bir HTTP sunucusu oluÅŸturur.
const server = http.createServer((request, response) => {
  console.log("ğŸ˜€ API'YE Ä°STEK GELDÄ° .", request.url);

  //obje daÄŸÄ±tma yÃ¶ntemi ile aldÄ±k
  const { query, pathname } = url.parse(request.url, true);

  // gelen isteÄŸin url'ine gÃ¶re farklÄ± cevap gÃ¶nder
  switch (pathname) {
    case "/overview":
      //Ã¼rÃ¼nler dizisinde ki eleman saysÄ±sÄ± kadar kart oluÅŸtur
      const cards = data.map((item) => replaceTemplate(tempCard, item));

      tempOverview = tempOverview.replace("{%PRODUCT_CARDS%}", cards);
      return response.end(tempOverview);

    case "/product":
      //1) dizide ki doÄŸru elemanÄ± bul
      const item = data.find((item) => item.id == query.id);

      //2) detay sayfasÄ±nda  html'i bulunna elemanÄ±n verilerine gÃ¶re gÃ¼ncelle
      const output = replaceTemplate(tempProduct, item);

      //3) gÃ¼ncel html'i client'a gÃ¶nder

      return response.end(output);

    default:
      return response.end("<h1>Tanimlanmayan Yol</h1>");
  }
});

// Bir dinleyici oluÅŸturup hangi porta gelen isteklerin dinleneceÄŸini sÃ¶ylemeliyiz.

server.listen(1616, "127.0.0.1", () => {
  console.log("IP adresinin 1616 portuna gelen istekler dinlenmeye alÄ±ndÄ±.");
});
