const fs = require("fs");

/*
ASENKRON
* asenkron iÅŸlemler baÅŸladÄ±ÄŸÄ±nda aynÄ± anda kod Ã§alÄ±ÅŸmaya baÅŸlar ve devam eder.
* node.js iÅŸlemi arka planda yÃ¼rÃ¼tÃ¼r ve tamamlandÄ±ÄŸÄ±nda callback function ile sonuÃ§ dÃ¶ndÃ¼rÃ¼r.
* asenkron iÅŸlmler node.js single-thread yapÄ±sÄ±ndan dolayÄ± performansÄ± artÄ±rÄ±r Ã§Ã¼nkÃ¼ bir iÅŸlem devam ederken diÄŸer iÅŸlemleri engellemeden yÃ¼rÃ¼tebilir.

* Hangi durumlarda kullanÄ±lÄ±r ?
* PerformansÄ±n Ã¶nemli olduÄŸu kullnÄ±cÄ± deneyimini etkilemek istemediÄŸimiz durumlarda asenkron yÃ¶ntemleri kullanmalyÄ±Ä±z.
* BÃ¼yÃ¼k dosya varsa veya daha fazla girfi / Ã§Ä±ktÄ± varsa asenkron tercih ederiz.

*/

// fs.readFile("./data/Ã¶rnek.txt", "utf-8", (err, data) => {
//   if (err) return console.log("okuma iÅŸleminde hata !!! ğŸ’¥ ", err);

//   console.log("dosya baÅŸarÄ±yla okundu ", data);
// });

// fs.writeFile("./data/output2.txt", "selamlar 6sezon BACKEND", (err) => {
//   if (err) return console.log("yazma iÅŸlemi hatalÄ± !!! ğŸ’¥ ", err);

//   console.log(" ğŸ˜„ yeni dosya baÅŸarÄ±yla oluÅŸturuldu.");
// });

// fs.unlink("./data/bozuk.txt", (err) => {
//   if (err) return console.log("silme iÅŸleminde hata oluÅŸtu !!! ğŸ’¥ ");
//   console.log(" ğŸ˜„ dosya baÅŸarÄ±yla silindi.");
// });

// Okuma iÅŸleminin okuma iÅŸlemine baÄŸÄ±mlÄ± olduÄŸu seneryoda asenkron yapÄ±yÄ± kullanabiliriz.

fs.readFile("./data/start.txt", "utf-8", (err, filename) => {
  if (err) return console.log("okunamadÄ± !!! ");

  console.log(filename);

  //start.txt dosyasÄ±nÄ±n iÃ§eriisnde yazan dosyayÄ± oku
  const sonuc = fs.readFileSync(filename, "utf-8");

  //sonucu konsola yzdÄ±r
  console.log("sonuc", sonuc);
});
